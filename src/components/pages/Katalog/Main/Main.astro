---
import { getByUID, getPage } from "@/prismic";
import KatalogMain from "./Main";

import PDFIcon from "@assets/ic-pdf.svg?raw";

const { list_category: list } = Astro.props.data;

const homeData = await getPage("home")
const homeKustomerList = await Promise.all(
    homeData.data.industry_list.map((industry: any) => {
        let item = getByUID("industry", industry.item.uid);
        return item;
    }),
);
const kustomerList = homeKustomerList.map(({ data, uid }) => (
	{
		title: data.title,
		uid: uid,
	}
));

let listUidCate = [];
await list
	.reduce((acc, curr) => acc.concat(curr.item.uid), [])
	.map((el) => {
		!listUidCate.includes(el) && listUidCate.push(el);
	});

let listCate = await Promise.all(
	listUidCate.map((el: any) => {
		const item = getByUID("product_group", el);
		return item;
	}),
);
const productList = [];
await Promise.all(
	listCate
		.reduce(
			(acc, curr) =>
				acc.concat({
					list: curr.data.product_list,
					name: curr.data.name,
				}),
			[],
		)
		.map(async (data: any) => {
			await Promise.all(
				data.list.map(async (el: any) => {
					if (el.product.uid) {
						await getByUID("product", el.product.uid).then((item) => {
							productList.push({
								...item,
								category: data.name,
							});
						});
					}
				}),
			);
		}),
);

/** (ðŸ’¡)  - Get categories based on previous sorting (like Home or Kustomer) */
const cateListWithSort = listCate.reduce((acc, curr) => acc.concat(curr.data.name), []);

/** (ðŸ’¡)  - Get the categories based on existing products */
let cateListByProduct = [...new Set(productList.map((item) => item.category))];

/** (ðŸ’¡)  - Sorting new categories based on existing products */
const indexMapCategories = {};
cateListWithSort.forEach((element, index) => {
	indexMapCategories[element] = index;
});
let cateList = cateListByProduct.sort((a, b) => {
	return indexMapCategories[a] - indexMapCategories[b];
});

/** (ðŸ’¡)  - Sorting new products based on new categories */
const indexMapProducts = {}
cateList.forEach((element, index) => {
	indexMapProducts[element] = index;
});
let allItem = productList.sort((a, b) => {
	return indexMapProducts[a.category] - indexMapProducts[b.category];
});
---
<KatalogMain
	kustomerList={kustomerList}
	cateList={cateList}
	allItem={allItem}
	client:visible={{ rootMargin: "100% 0% 100% 0%" }}
>
	<Fragment set:html={PDFIcon} slot="PDFIcon" />
</KatalogMain>
