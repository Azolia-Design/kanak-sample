---
import { Image } from "astro:assets";
import { getImage } from "astro:assets";
import kanakLogo from "@assets/kanak-logo.svg";
import recycleIc from "@assets/recycle.svg";
import headFlag from "@assets/head-flag.svg";
import bodyFlag from "@assets/body-flag.svg";
import tailFlag from "@assets/tail-flag.svg";
import extIcon from "@assets/ext-arr-menu.svg?raw";
import icDropdown from "@assets/ic-arrow-down.svg?raw";
import { getAllByType } from "@/prismic";
import HeaderGlobal from "./Header";
import { formatData } from "@/components/utils/text";
const currYear = new Date().getFullYear();

const kustomerList = await getAllByType("industry");
let refineKustomerList = kustomerList.map((el, idx) => ({
    name: el.data.title,
    url: `/kustomers/${el.uid}`,
}));
//Start hotfix
function swapItems(array, item1, item2) {
    const index1 = array.findIndex(item => item.name === item1);
    const index2 = array.findIndex(item => item.name === item2);

    if (index1 === -1 || index2 === -1) {
        console.log('One or both items not found');
        return array;
    }

    [array[index1], array[index2]] = [array[index2], array[index1]];
    return array;
}
refineKustomerList = swapItems(refineKustomerList, 'Retail', 'Education');
//End hotfix
const catelogList = await getAllByType("product_group");
let refineCatelogList = catelogList
    .filter((el, idx) => el.data.is_sustainables_ !== true)
    .map((el, idx) => ({
        name: el.data.name,
        url: `/katalog?category=${formatData(el.data.name)}`,
    }));
// Start hotfix
refineCatelogList = refineCatelogList.reverse()
// End hotfix
const pages = [
    {
        name: "Kustomers",
        type: "dropdown",
        sub_menu: [...refineKustomerList],
    },
    {
        name: "Katalog",
        type: "dropdown",
        sub_menu: [
            { name: "All Product", url: "/katalog" },
            ...refineCatelogList,
        ],
    },
    {
        name: "Solutions",
        type: "dropdown",
        sub_menu: [
            { name: "Private label", url: "/private-label" },
            { name: "Kustom packaging", url: "/kustom-packaging-solutions" },
            { name: "Testing, QC & Compliance", url: "/qc-procedures" },
        ],
    },
    { name: "Fulfillment", link: "/fulfillment", type: "" },
    { name: "Kase Studies", link: "/kase-studies", type: "" },
    // {
    //     name: "Resources",
    //     type: "dropdown",
    //     sub_menu: [
    //         { name: "Insights", url: "/insights" },
    //         { name: "Kase Studies", url: "/kase-studies" },
    //     ],
    // },
    {
        name: "Know us",
        type: "dropdown",
        sub_menu: [
            { name: "Know us", url: "/about" },
            { name: "Sustainability Commitment", url: "/sustainability" },
            { name: "Pakway", url: "/pakway" },
        ],
    },
];
const bodyFlagIc = await getImage({ src: bodyFlag, format: "svg" });
const pathname = new URL(Astro.request.url).pathname;
---

<HeaderGlobal
    pages={pages}
    bodyFlag={bodyFlagIc.src}
    currYear={currYear}
    pathname={pathname}
    check={refineCatelogList}
    client:load
>
    <Image src={kanakLogo} alt="Kanak Logo" slot="logo" class="img-h" />
    <Image src={recycleIc} alt="Recycle Icon" slot="recycleIc" />
    <Image src={headFlag} alt="" slot="headFlag" />
    <Image src={tailFlag} alt="" slot="tailFlag" />
    <Fragment set:html={extIcon} slot="extIcon" />
    <Fragment set:html={icDropdown} slot="icDropdown" />
</HeaderGlobal>
